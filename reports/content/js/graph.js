/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 932.0, "minX": 0.0, "maxY": 24275.0, "series": [{"data": [[0.0, 932.0], [0.1, 932.0], [0.2, 1187.0], [0.3, 1187.0], [0.4, 1189.0], [0.5, 1189.0], [0.6, 1189.0], [0.7, 1343.0], [0.8, 1357.0], [0.9, 1357.0], [1.0, 1373.0], [1.1, 1373.0], [1.2, 1433.0], [1.3, 1433.0], [1.4, 1652.0], [1.5, 1652.0], [1.6, 1723.0], [1.7, 1723.0], [1.8, 1743.0], [1.9, 1743.0], [2.0, 1754.0], [2.1, 1754.0], [2.2, 1864.0], [2.3, 1864.0], [2.4, 1918.0], [2.5, 1918.0], [2.6, 1925.0], [2.7, 1925.0], [2.8, 1925.0], [2.9, 1927.0], [3.0, 1927.0], [3.1, 2025.0], [3.2, 2025.0], [3.3, 2113.0], [3.4, 2113.0], [3.5, 2215.0], [3.6, 2215.0], [3.7, 2238.0], [3.8, 2238.0], [3.9, 2274.0], [4.0, 2274.0], [4.1, 2301.0], [4.2, 2301.0], [4.3, 2309.0], [4.4, 2309.0], [4.5, 2328.0], [4.6, 2328.0], [4.7, 2400.0], [4.8, 2400.0], [4.9, 2418.0], [5.0, 2418.0], [5.1, 2425.0], [5.2, 2425.0], [5.3, 2458.0], [5.4, 2458.0], [5.5, 2548.0], [5.6, 2548.0], [5.7, 2590.0], [5.8, 2590.0], [5.9, 2602.0], [6.0, 2602.0], [6.1, 2613.0], [6.2, 2613.0], [6.3, 2746.0], [6.4, 2746.0], [6.5, 2746.0], [6.6, 2746.0], [6.7, 2750.0], [6.8, 2750.0], [6.9, 2911.0], [7.0, 2911.0], [7.1, 2927.0], [7.2, 2927.0], [7.3, 2942.0], [7.4, 2942.0], [7.5, 3016.0], [7.6, 3016.0], [7.7, 3064.0], [7.8, 3064.0], [7.9, 3137.0], [8.0, 3137.0], [8.1, 3144.0], [8.2, 3144.0], [8.3, 3192.0], [8.4, 3192.0], [8.5, 3231.0], [8.6, 3231.0], [8.7, 3248.0], [8.8, 3324.0], [8.9, 3324.0], [9.0, 3625.0], [9.1, 3625.0], [9.2, 3704.0], [9.3, 3704.0], [9.4, 3774.0], [9.5, 3774.0], [9.6, 3789.0], [9.7, 3789.0], [9.8, 3840.0], [9.9, 3840.0], [10.0, 3853.0], [10.1, 3853.0], [10.2, 3874.0], [10.3, 3874.0], [10.4, 3940.0], [10.5, 3940.0], [10.6, 3956.0], [10.7, 3956.0], [10.8, 3999.0], [10.9, 3999.0], [11.0, 4114.0], [11.1, 4114.0], [11.2, 4129.0], [11.3, 4129.0], [11.4, 4179.0], [11.5, 4179.0], [11.6, 4211.0], [11.7, 4211.0], [11.8, 4383.0], [11.9, 4383.0], [12.0, 4525.0], [12.1, 4525.0], [12.2, 4537.0], [12.3, 4537.0], [12.4, 4639.0], [12.5, 4639.0], [12.6, 4660.0], [12.7, 4660.0], [12.8, 4738.0], [12.9, 4738.0], [13.0, 4739.0], [13.1, 4739.0], [13.2, 4799.0], [13.3, 4799.0], [13.4, 4836.0], [13.5, 4836.0], [13.6, 4874.0], [13.7, 4874.0], [13.8, 5034.0], [13.9, 5034.0], [14.0, 5064.0], [14.1, 5064.0], [14.2, 5070.0], [14.3, 5070.0], [14.4, 5168.0], [14.5, 5168.0], [14.6, 5205.0], [14.7, 5205.0], [14.8, 5230.0], [14.9, 5230.0], [15.0, 5262.0], [15.1, 5262.0], [15.2, 5299.0], [15.3, 5299.0], [15.4, 5391.0], [15.5, 5391.0], [15.6, 5427.0], [15.7, 5427.0], [15.8, 5485.0], [15.9, 5485.0], [16.0, 5557.0], [16.1, 5557.0], [16.2, 5558.0], [16.3, 5558.0], [16.4, 5647.0], [16.5, 5647.0], [16.6, 5654.0], [16.7, 5654.0], [16.8, 5675.0], [16.9, 5675.0], [17.0, 5801.0], [17.1, 5801.0], [17.2, 5848.0], [17.3, 5848.0], [17.4, 5860.0], [17.5, 5860.0], [17.6, 5860.0], [17.7, 5860.0], [17.8, 5888.0], [17.9, 5888.0], [18.0, 5990.0], [18.1, 5990.0], [18.2, 5996.0], [18.3, 5996.0], [18.4, 6001.0], [18.5, 6001.0], [18.6, 6001.0], [18.7, 6001.0], [18.8, 6011.0], [18.9, 6011.0], [19.0, 6016.0], [19.1, 6016.0], [19.2, 6029.0], [19.3, 6029.0], [19.4, 6046.0], [19.5, 6046.0], [19.6, 6082.0], [19.7, 6082.0], [19.8, 6103.0], [19.9, 6103.0], [20.0, 6115.0], [20.1, 6115.0], [20.2, 6158.0], [20.3, 6158.0], [20.4, 6177.0], [20.5, 6177.0], [20.6, 6178.0], [20.7, 6178.0], [20.8, 6306.0], [20.9, 6306.0], [21.0, 6343.0], [21.1, 6343.0], [21.2, 6420.0], [21.3, 6420.0], [21.4, 6425.0], [21.5, 6425.0], [21.6, 6434.0], [21.7, 6434.0], [21.8, 6469.0], [21.9, 6469.0], [22.0, 6478.0], [22.1, 6478.0], [22.2, 6490.0], [22.3, 6490.0], [22.4, 6535.0], [22.5, 6535.0], [22.6, 6535.0], [22.7, 6535.0], [22.8, 6556.0], [22.9, 6556.0], [23.0, 6739.0], [23.1, 6739.0], [23.2, 6743.0], [23.3, 6743.0], [23.4, 6767.0], [23.5, 6767.0], [23.6, 6781.0], [23.7, 6781.0], [23.8, 6794.0], [23.9, 6794.0], [24.0, 6815.0], [24.1, 6815.0], [24.2, 6891.0], [24.3, 6891.0], [24.4, 6942.0], [24.5, 6942.0], [24.6, 6977.0], [24.7, 6977.0], [24.8, 6987.0], [24.9, 6987.0], [25.0, 7047.0], [25.1, 7047.0], [25.2, 7051.0], [25.3, 7051.0], [25.4, 7135.0], [25.5, 7135.0], [25.6, 7159.0], [25.7, 7159.0], [25.8, 7192.0], [25.9, 7192.0], [26.0, 7194.0], [26.1, 7194.0], [26.2, 7214.0], [26.3, 7214.0], [26.4, 7258.0], [26.5, 7258.0], [26.6, 7384.0], [26.7, 7384.0], [26.8, 7392.0], [26.9, 7392.0], [27.0, 7415.0], [27.1, 7415.0], [27.2, 7488.0], [27.3, 7488.0], [27.4, 7498.0], [27.5, 7498.0], [27.6, 7514.0], [27.7, 7514.0], [27.8, 7628.0], [27.9, 7628.0], [28.0, 7632.0], [28.1, 7632.0], [28.2, 7698.0], [28.3, 7698.0], [28.4, 7705.0], [28.5, 7705.0], [28.6, 7734.0], [28.7, 7734.0], [28.8, 7734.0], [28.9, 7734.0], [29.0, 7784.0], [29.1, 7784.0], [29.2, 7785.0], [29.3, 7785.0], [29.4, 7795.0], [29.5, 7795.0], [29.6, 7812.0], [29.7, 7812.0], [29.8, 7820.0], [29.9, 7820.0], [30.0, 7889.0], [30.1, 7889.0], [30.2, 8051.0], [30.3, 8051.0], [30.4, 8058.0], [30.5, 8058.0], [30.6, 8120.0], [30.7, 8120.0], [30.8, 8122.0], [30.9, 8122.0], [31.0, 8176.0], [31.1, 8176.0], [31.2, 8199.0], [31.3, 8199.0], [31.4, 8200.0], [31.5, 8200.0], [31.6, 8223.0], [31.7, 8223.0], [31.8, 8241.0], [31.9, 8241.0], [32.0, 8255.0], [32.1, 8255.0], [32.2, 8324.0], [32.3, 8324.0], [32.4, 8340.0], [32.5, 8340.0], [32.6, 8352.0], [32.7, 8352.0], [32.8, 8355.0], [32.9, 8355.0], [33.0, 8378.0], [33.1, 8378.0], [33.2, 8392.0], [33.3, 8392.0], [33.4, 8461.0], [33.5, 8461.0], [33.6, 8473.0], [33.7, 8473.0], [33.8, 8515.0], [33.9, 8515.0], [34.0, 8516.0], [34.1, 8516.0], [34.2, 8517.0], [34.3, 8517.0], [34.4, 8548.0], [34.5, 8548.0], [34.6, 8588.0], [34.7, 8588.0], [34.8, 8589.0], [34.9, 8589.0], [35.0, 8624.0], [35.1, 8624.0], [35.2, 8648.0], [35.3, 8648.0], [35.4, 8658.0], [35.5, 8658.0], [35.6, 8782.0], [35.7, 8782.0], [35.8, 8802.0], [35.9, 8802.0], [36.0, 8815.0], [36.1, 8815.0], [36.2, 8819.0], [36.3, 8819.0], [36.4, 8827.0], [36.5, 8827.0], [36.6, 8830.0], [36.7, 8830.0], [36.8, 8838.0], [36.9, 8838.0], [37.0, 8841.0], [37.1, 8841.0], [37.2, 8858.0], [37.3, 8858.0], [37.4, 8874.0], [37.5, 8874.0], [37.6, 8979.0], [37.7, 8979.0], [37.8, 8993.0], [37.9, 8993.0], [38.0, 9022.0], [38.1, 9022.0], [38.2, 9059.0], [38.3, 9059.0], [38.4, 9059.0], [38.5, 9062.0], [38.6, 9062.0], [38.7, 9068.0], [38.8, 9068.0], [38.9, 9077.0], [39.0, 9077.0], [39.1, 9084.0], [39.2, 9084.0], [39.3, 9113.0], [39.4, 9113.0], [39.5, 9124.0], [39.6, 9124.0], [39.7, 9197.0], [39.8, 9197.0], [39.9, 9239.0], [40.0, 9239.0], [40.1, 9243.0], [40.2, 9243.0], [40.3, 9252.0], [40.4, 9252.0], [40.5, 9253.0], [40.6, 9253.0], [40.7, 9266.0], [40.8, 9266.0], [40.9, 9309.0], [41.0, 9309.0], [41.1, 9310.0], [41.2, 9310.0], [41.3, 9328.0], [41.4, 9328.0], [41.5, 9329.0], [41.6, 9329.0], [41.7, 9411.0], [41.8, 9411.0], [41.9, 9447.0], [42.0, 9447.0], [42.1, 9450.0], [42.2, 9450.0], [42.3, 9455.0], [42.4, 9455.0], [42.5, 9465.0], [42.6, 9465.0], [42.7, 9500.0], [42.8, 9500.0], [42.9, 9562.0], [43.0, 9562.0], [43.1, 9571.0], [43.2, 9571.0], [43.3, 9581.0], [43.4, 9581.0], [43.5, 9595.0], [43.6, 9595.0], [43.7, 9604.0], [43.8, 9604.0], [43.9, 9623.0], [44.0, 9623.0], [44.1, 9734.0], [44.2, 9734.0], [44.3, 9754.0], [44.4, 9754.0], [44.5, 9757.0], [44.6, 9757.0], [44.7, 9783.0], [44.8, 9783.0], [44.9, 9913.0], [45.0, 9913.0], [45.1, 9916.0], [45.2, 9916.0], [45.3, 9933.0], [45.4, 9933.0], [45.5, 9958.0], [45.6, 9958.0], [45.7, 9995.0], [45.8, 9995.0], [45.9, 10006.0], [46.0, 10006.0], [46.1, 10044.0], [46.2, 10044.0], [46.3, 10087.0], [46.4, 10087.0], [46.5, 10127.0], [46.6, 10127.0], [46.7, 10130.0], [46.8, 10130.0], [46.9, 10134.0], [47.0, 10134.0], [47.1, 10231.0], [47.2, 10231.0], [47.3, 10498.0], [47.4, 10498.0], [47.5, 10558.0], [47.6, 10558.0], [47.7, 10656.0], [47.8, 10656.0], [47.9, 10691.0], [48.0, 10691.0], [48.1, 10718.0], [48.2, 10718.0], [48.3, 10758.0], [48.4, 10758.0], [48.5, 10783.0], [48.6, 10783.0], [48.7, 10814.0], [48.8, 10814.0], [48.9, 10914.0], [49.0, 10914.0], [49.1, 11004.0], [49.2, 11004.0], [49.3, 11041.0], [49.4, 11041.0], [49.5, 11194.0], [49.6, 11194.0], [49.7, 11229.0], [49.8, 11229.0], [49.9, 11234.0], [50.0, 11234.0], [50.1, 11248.0], [50.2, 11248.0], [50.3, 11287.0], [50.4, 11287.0], [50.5, 11287.0], [50.6, 11287.0], [50.7, 11354.0], [50.8, 11354.0], [50.9, 11413.0], [51.0, 11413.0], [51.1, 11477.0], [51.2, 11477.0], [51.3, 11484.0], [51.4, 11484.0], [51.5, 11494.0], [51.6, 11494.0], [51.7, 11511.0], [51.8, 11511.0], [51.9, 11516.0], [52.0, 11516.0], [52.1, 11596.0], [52.2, 11596.0], [52.3, 11634.0], [52.4, 11634.0], [52.5, 11698.0], [52.6, 11698.0], [52.7, 11748.0], [52.8, 11748.0], [52.9, 11947.0], [53.0, 11947.0], [53.1, 12015.0], [53.2, 12015.0], [53.3, 12027.0], [53.4, 12027.0], [53.5, 12084.0], [53.6, 12084.0], [53.7, 12109.0], [53.8, 12109.0], [53.9, 12143.0], [54.0, 12143.0], [54.1, 12251.0], [54.2, 12251.0], [54.3, 12321.0], [54.4, 12321.0], [54.5, 12361.0], [54.6, 12361.0], [54.7, 12365.0], [54.8, 12365.0], [54.9, 12368.0], [55.0, 12368.0], [55.1, 12502.0], [55.2, 12502.0], [55.3, 12539.0], [55.4, 12539.0], [55.5, 12540.0], [55.6, 12540.0], [55.7, 12562.0], [55.8, 12562.0], [55.9, 12579.0], [56.0, 12579.0], [56.1, 12604.0], [56.2, 12604.0], [56.3, 12612.0], [56.4, 12612.0], [56.5, 12752.0], [56.6, 12752.0], [56.7, 12761.0], [56.8, 12761.0], [56.9, 12895.0], [57.0, 12895.0], [57.1, 12906.0], [57.2, 12906.0], [57.3, 12907.0], [57.4, 12907.0], [57.5, 12936.0], [57.6, 12936.0], [57.7, 12945.0], [57.8, 12945.0], [57.9, 12950.0], [58.0, 12950.0], [58.1, 12999.0], [58.2, 12999.0], [58.3, 13027.0], [58.4, 13027.0], [58.5, 13068.0], [58.6, 13068.0], [58.7, 13078.0], [58.8, 13078.0], [58.9, 13149.0], [59.0, 13149.0], [59.1, 13235.0], [59.2, 13235.0], [59.3, 13340.0], [59.4, 13340.0], [59.5, 13471.0], [59.6, 13471.0], [59.7, 13472.0], [59.8, 13472.0], [59.9, 13482.0], [60.0, 13482.0], [60.1, 13495.0], [60.2, 13495.0], [60.3, 13544.0], [60.4, 13544.0], [60.5, 13546.0], [60.6, 13546.0], [60.7, 13561.0], [60.8, 13561.0], [60.9, 13592.0], [61.0, 13592.0], [61.1, 13660.0], [61.2, 13660.0], [61.3, 13731.0], [61.4, 13731.0], [61.5, 13814.0], [61.6, 13814.0], [61.7, 13887.0], [61.8, 13887.0], [61.9, 13972.0], [62.0, 13972.0], [62.1, 13989.0], [62.2, 13989.0], [62.3, 14033.0], [62.4, 14033.0], [62.5, 14130.0], [62.6, 14130.0], [62.7, 14154.0], [62.8, 14154.0], [62.9, 14175.0], [63.0, 14175.0], [63.1, 14250.0], [63.2, 14250.0], [63.3, 14276.0], [63.4, 14276.0], [63.5, 14425.0], [63.6, 14425.0], [63.7, 14644.0], [63.8, 14644.0], [63.9, 14649.0], [64.0, 14649.0], [64.1, 14740.0], [64.2, 14740.0], [64.3, 14751.0], [64.4, 14751.0], [64.5, 14867.0], [64.6, 14867.0], [64.7, 15035.0], [64.8, 15035.0], [64.9, 15069.0], [65.0, 15069.0], [65.1, 15109.0], [65.2, 15109.0], [65.3, 15214.0], [65.4, 15214.0], [65.5, 15457.0], [65.6, 15457.0], [65.7, 15476.0], [65.8, 15476.0], [65.9, 15483.0], [66.0, 15483.0], [66.1, 15595.0], [66.2, 15595.0], [66.3, 15602.0], [66.4, 15602.0], [66.5, 15631.0], [66.6, 15631.0], [66.7, 15715.0], [66.8, 15715.0], [66.9, 15722.0], [67.0, 15722.0], [67.1, 15738.0], [67.2, 15738.0], [67.3, 15783.0], [67.4, 15783.0], [67.5, 15895.0], [67.6, 15895.0], [67.7, 15901.0], [67.8, 15901.0], [67.9, 15978.0], [68.0, 15978.0], [68.1, 15995.0], [68.2, 15995.0], [68.3, 16106.0], [68.4, 16106.0], [68.5, 16106.0], [68.6, 16106.0], [68.7, 16137.0], [68.8, 16137.0], [68.9, 16214.0], [69.0, 16214.0], [69.1, 16245.0], [69.2, 16245.0], [69.3, 16326.0], [69.4, 16326.0], [69.5, 16376.0], [69.6, 16376.0], [69.7, 16391.0], [69.8, 16391.0], [69.9, 16418.0], [70.0, 16418.0], [70.1, 16455.0], [70.2, 16455.0], [70.3, 16460.0], [70.4, 16460.0], [70.5, 16480.0], [70.6, 16480.0], [70.7, 16487.0], [70.8, 16487.0], [70.9, 16622.0], [71.0, 16622.0], [71.1, 16723.0], [71.2, 16723.0], [71.3, 16764.0], [71.4, 16764.0], [71.5, 16778.0], [71.6, 16778.0], [71.7, 16788.0], [71.8, 16788.0], [71.9, 16815.0], [72.0, 16815.0], [72.1, 16827.0], [72.2, 16827.0], [72.3, 16840.0], [72.4, 16840.0], [72.5, 16842.0], [72.6, 16842.0], [72.7, 16861.0], [72.8, 16861.0], [72.9, 16889.0], [73.0, 16889.0], [73.1, 16899.0], [73.2, 16899.0], [73.3, 16944.0], [73.4, 16944.0], [73.5, 17006.0], [73.6, 17006.0], [73.7, 17082.0], [73.8, 17082.0], [73.9, 17101.0], [74.0, 17101.0], [74.1, 17111.0], [74.2, 17111.0], [74.3, 17122.0], [74.4, 17122.0], [74.5, 17211.0], [74.6, 17211.0], [74.7, 17218.0], [74.8, 17218.0], [74.9, 17272.0], [75.0, 17272.0], [75.1, 17300.0], [75.2, 17300.0], [75.3, 17385.0], [75.4, 17385.0], [75.5, 17483.0], [75.6, 17483.0], [75.7, 17500.0], [75.8, 17500.0], [75.9, 17504.0], [76.0, 17504.0], [76.1, 17544.0], [76.2, 17544.0], [76.3, 17567.0], [76.4, 17567.0], [76.5, 17607.0], [76.6, 17607.0], [76.7, 17642.0], [76.8, 17642.0], [76.9, 17687.0], [77.0, 17687.0], [77.1, 17747.0], [77.2, 17747.0], [77.3, 17783.0], [77.4, 17783.0], [77.5, 17791.0], [77.6, 17791.0], [77.7, 17880.0], [77.8, 17880.0], [77.9, 18156.0], [78.0, 18156.0], [78.1, 18208.0], [78.2, 18208.0], [78.3, 18270.0], [78.4, 18270.0], [78.5, 18291.0], [78.6, 18291.0], [78.7, 18329.0], [78.8, 18329.0], [78.9, 18427.0], [79.0, 18427.0], [79.1, 18516.0], [79.2, 18516.0], [79.3, 18518.0], [79.4, 18518.0], [79.5, 18570.0], [79.6, 18570.0], [79.7, 18594.0], [79.8, 18594.0], [79.9, 18622.0], [80.0, 18622.0], [80.1, 18703.0], [80.2, 18703.0], [80.3, 18760.0], [80.4, 18760.0], [80.5, 18829.0], [80.6, 18829.0], [80.7, 18840.0], [80.8, 18840.0], [80.9, 18897.0], [81.0, 18897.0], [81.1, 18912.0], [81.2, 18912.0], [81.3, 18944.0], [81.4, 18944.0], [81.5, 18959.0], [81.6, 18959.0], [81.7, 18990.0], [81.8, 18990.0], [81.9, 19053.0], [82.0, 19053.0], [82.1, 19053.0], [82.2, 19053.0], [82.3, 19118.0], [82.4, 19118.0], [82.5, 19122.0], [82.6, 19122.0], [82.7, 19147.0], [82.8, 19147.0], [82.9, 19284.0], [83.0, 19284.0], [83.1, 19342.0], [83.2, 19342.0], [83.3, 19400.0], [83.4, 19400.0], [83.5, 19438.0], [83.6, 19438.0], [83.7, 19525.0], [83.8, 19525.0], [83.9, 19552.0], [84.0, 19552.0], [84.1, 19554.0], [84.2, 19554.0], [84.3, 19564.0], [84.4, 19564.0], [84.5, 19568.0], [84.6, 19568.0], [84.7, 19616.0], [84.8, 19616.0], [84.9, 19660.0], [85.0, 19660.0], [85.1, 19692.0], [85.2, 19692.0], [85.3, 19794.0], [85.4, 19794.0], [85.5, 19802.0], [85.6, 19802.0], [85.7, 19802.0], [85.8, 19802.0], [85.9, 19842.0], [86.0, 19842.0], [86.1, 19910.0], [86.2, 19910.0], [86.3, 19936.0], [86.4, 19936.0], [86.5, 20086.0], [86.6, 20086.0], [86.7, 20163.0], [86.8, 20163.0], [86.9, 20197.0], [87.0, 20197.0], [87.1, 20234.0], [87.2, 20234.0], [87.3, 20323.0], [87.4, 20323.0], [87.5, 20340.0], [87.6, 20340.0], [87.7, 20402.0], [87.8, 20402.0], [87.9, 20461.0], [88.0, 20461.0], [88.1, 20464.0], [88.2, 20464.0], [88.3, 20492.0], [88.4, 20492.0], [88.5, 20496.0], [88.6, 20496.0], [88.7, 20520.0], [88.8, 20520.0], [88.9, 20637.0], [89.0, 20637.0], [89.1, 20659.0], [89.2, 20659.0], [89.3, 20683.0], [89.4, 20683.0], [89.5, 20750.0], [89.6, 20750.0], [89.7, 20777.0], [89.8, 20777.0], [89.9, 20856.0], [90.0, 20856.0], [90.1, 20866.0], [90.2, 20866.0], [90.3, 20943.0], [90.4, 20943.0], [90.5, 20951.0], [90.6, 20951.0], [90.7, 20965.0], [90.8, 20965.0], [90.9, 20994.0], [91.0, 20994.0], [91.1, 21024.0], [91.2, 21024.0], [91.3, 21030.0], [91.4, 21030.0], [91.5, 21056.0], [91.6, 21056.0], [91.7, 21100.0], [91.8, 21100.0], [91.9, 21195.0], [92.0, 21195.0], [92.1, 21288.0], [92.2, 21288.0], [92.3, 21335.0], [92.4, 21335.0], [92.5, 21340.0], [92.6, 21340.0], [92.7, 21366.0], [92.8, 21366.0], [92.9, 21422.0], [93.0, 21422.0], [93.1, 21449.0], [93.2, 21449.0], [93.3, 21512.0], [93.4, 21512.0], [93.5, 21671.0], [93.6, 21671.0], [93.7, 21737.0], [93.8, 21737.0], [93.9, 21738.0], [94.0, 21738.0], [94.1, 21752.0], [94.2, 21752.0], [94.3, 21895.0], [94.4, 21895.0], [94.5, 22073.0], [94.6, 22073.0], [94.7, 22100.0], [94.8, 22100.0], [94.9, 22125.0], [95.0, 22125.0], [95.1, 22245.0], [95.2, 22245.0], [95.3, 22264.0], [95.4, 22264.0], [95.5, 22278.0], [95.6, 22278.0], [95.7, 22321.0], [95.8, 22321.0], [95.9, 22390.0], [96.0, 22390.0], [96.1, 22394.0], [96.2, 22394.0], [96.3, 22458.0], [96.4, 22458.0], [96.5, 22489.0], [96.6, 22489.0], [96.7, 22492.0], [96.8, 22492.0], [96.9, 22562.0], [97.0, 22562.0], [97.1, 22642.0], [97.2, 22642.0], [97.3, 22734.0], [97.4, 22734.0], [97.5, 22743.0], [97.6, 22743.0], [97.7, 22866.0], [97.8, 22866.0], [97.9, 23001.0], [98.0, 23001.0], [98.1, 23098.0], [98.2, 23098.0], [98.3, 23114.0], [98.4, 23114.0], [98.5, 23288.0], [98.6, 23288.0], [98.7, 23401.0], [98.8, 23401.0], [98.9, 23433.0], [99.0, 23433.0], [99.1, 23470.0], [99.2, 23470.0], [99.3, 23542.0], [99.4, 23542.0], [99.5, 23961.0], [99.6, 23961.0], [99.7, 24011.0], [99.8, 24011.0], [99.9, 24275.0], [100.0, 24275.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 9.0, "series": [{"data": [[900.0, 1.0], [1100.0, 2.0], [1300.0, 3.0], [1400.0, 1.0], [1600.0, 1.0], [1700.0, 3.0], [1800.0, 1.0], [1900.0, 3.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 3.0], [2300.0, 3.0], [2400.0, 4.0], [2500.0, 2.0], [2600.0, 2.0], [2700.0, 3.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 3.0], [3200.0, 2.0], [3300.0, 1.0], [3700.0, 3.0], [3600.0, 1.0], [3800.0, 3.0], [3900.0, 3.0], [4100.0, 3.0], [4300.0, 1.0], [4200.0, 1.0], [4500.0, 2.0], [4600.0, 2.0], [4800.0, 2.0], [4700.0, 3.0], [5100.0, 1.0], [5000.0, 3.0], [5200.0, 4.0], [5300.0, 1.0], [5400.0, 2.0], [5600.0, 3.0], [5500.0, 2.0], [5800.0, 5.0], [6000.0, 7.0], [6100.0, 5.0], [5900.0, 2.0], [6300.0, 2.0], [6500.0, 3.0], [6400.0, 6.0], [6800.0, 2.0], [6900.0, 3.0], [6700.0, 5.0], [7100.0, 4.0], [7000.0, 2.0], [7400.0, 3.0], [7300.0, 2.0], [7200.0, 2.0], [7600.0, 3.0], [7500.0, 1.0], [7700.0, 6.0], [7800.0, 3.0], [8000.0, 2.0], [8100.0, 4.0], [8300.0, 6.0], [8500.0, 6.0], [8200.0, 4.0], [8400.0, 2.0], [8600.0, 3.0], [8700.0, 1.0], [8800.0, 9.0], [9000.0, 6.0], [9100.0, 3.0], [8900.0, 2.0], [9200.0, 5.0], [9300.0, 4.0], [9700.0, 4.0], [9400.0, 5.0], [9600.0, 2.0], [9500.0, 5.0], [10000.0, 3.0], [10100.0, 3.0], [9900.0, 5.0], [10200.0, 1.0], [10600.0, 2.0], [10500.0, 1.0], [10700.0, 3.0], [10400.0, 1.0], [11000.0, 2.0], [11100.0, 1.0], [11200.0, 5.0], [10800.0, 1.0], [10900.0, 1.0], [11400.0, 4.0], [11300.0, 1.0], [11500.0, 3.0], [11600.0, 2.0], [11700.0, 1.0], [12000.0, 3.0], [12100.0, 2.0], [12200.0, 1.0], [11900.0, 1.0], [12500.0, 5.0], [12700.0, 2.0], [12300.0, 4.0], [12600.0, 2.0], [13100.0, 1.0], [13300.0, 1.0], [13200.0, 1.0], [12900.0, 6.0], [12800.0, 1.0], [13000.0, 3.0], [13700.0, 1.0], [13600.0, 1.0], [13500.0, 4.0], [13400.0, 4.0], [13800.0, 2.0], [13900.0, 2.0], [14000.0, 1.0], [14100.0, 3.0], [14200.0, 2.0], [14800.0, 1.0], [14400.0, 1.0], [14600.0, 2.0], [14700.0, 2.0], [15000.0, 2.0], [15100.0, 1.0], [15200.0, 1.0], [15500.0, 1.0], [15600.0, 2.0], [15400.0, 3.0], [15800.0, 1.0], [15700.0, 4.0], [16100.0, 3.0], [16300.0, 3.0], [15900.0, 3.0], [16200.0, 2.0], [17200.0, 3.0], [16400.0, 5.0], [16600.0, 1.0], [16800.0, 7.0], [17000.0, 2.0], [17400.0, 1.0], [17600.0, 3.0], [18200.0, 3.0], [17800.0, 1.0], [18400.0, 1.0], [18800.0, 3.0], [19400.0, 2.0], [19000.0, 2.0], [18600.0, 1.0], [19200.0, 1.0], [20000.0, 1.0], [19800.0, 3.0], [20400.0, 5.0], [20200.0, 1.0], [19600.0, 3.0], [21000.0, 3.0], [20800.0, 2.0], [20600.0, 3.0], [21400.0, 2.0], [21200.0, 1.0], [21600.0, 1.0], [22200.0, 3.0], [22400.0, 3.0], [22000.0, 1.0], [21800.0, 1.0], [22600.0, 1.0], [23400.0, 3.0], [23000.0, 2.0], [22800.0, 1.0], [23200.0, 1.0], [24200.0, 1.0], [24000.0, 1.0], [16900.0, 1.0], [17300.0, 2.0], [17100.0, 3.0], [16700.0, 4.0], [17500.0, 4.0], [17700.0, 3.0], [18100.0, 1.0], [18300.0, 1.0], [18900.0, 4.0], [18500.0, 4.0], [18700.0, 2.0], [19100.0, 3.0], [19300.0, 1.0], [19500.0, 5.0], [19900.0, 2.0], [20300.0, 2.0], [20100.0, 2.0], [19700.0, 1.0], [21300.0, 3.0], [21100.0, 2.0], [20900.0, 4.0], [20700.0, 2.0], [21500.0, 1.0], [20500.0, 1.0], [22300.0, 3.0], [21700.0, 3.0], [22100.0, 2.0], [22500.0, 1.0], [23100.0, 1.0], [23500.0, 1.0], [22700.0, 2.0], [23900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 24200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 493.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 493.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 143.53146853146862, "minX": 1.68294192E12, "maxY": 278.1028037383176, "series": [{"data": [[1.68294192E12, 278.1028037383176], [1.68294198E12, 143.53146853146862]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68294198E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2328.0, "minX": 1.0, "maxY": 24275.0, "series": [{"data": [[2.0, 24011.0], [3.0, 22125.0], [4.0, 23961.0], [5.0, 21422.0], [6.0, 24275.0], [7.0, 22734.0], [8.0, 20659.0], [9.0, 23288.0], [10.0, 22264.0], [11.0, 19118.0], [12.0, 18912.0], [13.0, 20943.0], [14.0, 21335.0], [15.0, 22743.0], [16.0, 19284.0], [17.0, 19564.0], [18.0, 23001.0], [19.0, 21895.0], [20.0, 19616.0], [21.0, 23542.0], [22.0, 19842.0], [23.0, 22245.0], [24.0, 21340.0], [25.0, 19122.0], [26.0, 20866.0], [27.0, 21195.0], [28.0, 20402.0], [29.0, 22390.0], [30.0, 18516.0], [31.0, 22866.0], [33.0, 19910.0], [32.0, 19936.0], [35.0, 18622.0], [34.0, 19794.0], [37.0, 20683.0], [36.0, 20520.0], [39.0, 22562.0], [38.0, 20492.0], [40.0, 19692.0], [43.0, 21056.0], [42.0, 21781.0], [45.0, 22492.0], [44.0, 21030.0], [47.0, 21737.0], [46.0, 23401.0], [49.0, 20163.0], [48.0, 22489.0], [51.0, 19660.0], [50.0, 19053.0], [53.0, 21024.0], [52.0, 19802.0], [55.0, 21288.0], [54.0, 22073.0], [57.0, 21449.0], [56.0, 19552.0], [59.0, 18944.0], [58.0, 18990.0], [61.0, 20750.0], [60.0, 18329.0], [63.0, 18897.0], [62.0, 20965.0], [67.0, 17567.0], [66.0, 20197.0], [65.0, 20461.0], [64.0, 20994.0], [71.0, 20234.0], [70.0, 22100.0], [69.0, 18427.0], [68.0, 22458.0], [75.0, 23433.0], [74.0, 23470.0], [73.0, 22278.0], [72.0, 20637.0], [79.0, 20323.0], [78.0, 16827.0], [77.0, 20340.0], [76.0, 21671.0], [83.0, 16788.0], [82.0, 21738.0], [81.0, 21512.0], [80.0, 23114.0], [87.0, 19438.0], [86.0, 16840.0], [85.0, 22321.0], [84.0, 15783.0], [91.0, 8982.5], [90.0, 20777.0], [89.0, 15901.0], [88.0, 19525.0], [94.0, 8969.0], [93.0, 9270.5], [95.0, 10243.0], [92.0, 15631.0], [98.0, 6268.333333333333], [97.0, 8747.0], [99.0, 7078.0], [96.0, 16764.0], [102.0, 7864.333333333333], [103.0, 15715.0], [101.0, 17483.0], [100.0, 20496.0], [105.0, 9091.5], [107.0, 16842.0], [106.0, 16326.0], [104.0, 16455.0], [109.0, 9668.5], [111.0, 20175.5], [108.0, 17607.0], [114.0, 2328.0], [115.0, 18226.5], [113.0, 15722.0], [112.0, 15738.0], [119.0, 10094.0], [118.0, 18570.0], [117.0, 17880.0], [116.0, 18703.0], [121.0, 9244.0], [123.0, 16480.0], [122.0, 18208.0], [120.0, 20856.0], [124.0, 7132.5], [125.0, 4830.166666666666], [126.0, 9865.0], [127.0, 16106.0], [135.0, 18840.0], [134.0, 13814.0], [133.0, 14008.5], [131.0, 22394.0], [130.0, 17783.0], [129.0, 17747.0], [128.0, 15978.0], [136.0, 12283.5], [141.0, 6445.5], [142.0, 8570.0], [143.0, 17082.0], [140.0, 19568.0], [139.0, 15214.0], [138.0, 17687.0], [137.0, 18518.0], [146.0, 7219.333333333333], [151.0, 14751.0], [150.0, 18156.0], [149.0, 17504.0], [148.0, 17500.0], [147.0, 16778.0], [145.0, 18829.0], [144.0, 18760.0], [159.0, 21366.0], [158.0, 17791.0], [157.0, 15457.0], [156.0, 15476.0], [155.0, 13472.0], [154.0, 13544.0], [153.0, 15895.0], [152.0, 16861.0], [160.0, 8109.5], [164.0, 7543.0], [162.0, 8699.5], [167.0, 10376.0], [166.0, 13068.0], [165.0, 12999.0], [163.0, 14644.0], [161.0, 13471.0], [170.0, 10670.5], [175.0, 18594.0], [174.0, 12906.0], [173.0, 18959.0], [172.0, 16723.0], [171.0, 17544.0], [169.0, 17642.0], [168.0, 16487.0], [177.0, 7380.5], [183.0, 13078.0], [182.0, 11748.0], [181.0, 12368.0], [180.0, 14425.0], [179.0, 11947.0], [178.0, 17211.0], [176.0, 12761.0], [185.0, 6203.333333333334], [186.0, 8904.5], [190.0, 7765.5], [189.0, 8319.5], [191.0, 11596.0], [188.0, 13482.0], [187.0, 19554.0], [184.0, 11634.0], [193.0, 8646.0], [198.0, 7563.5], [199.0, 14175.0], [197.0, 12361.0], [196.0, 12365.0], [195.0, 15483.0], [194.0, 13592.0], [192.0, 14250.0], [202.0, 9611.5], [204.0, 7866.5], [206.0, 12945.0], [205.0, 11248.0], [203.0, 12950.0], [201.0, 16418.0], [200.0, 16391.0], [208.0, 9712.0], [214.0, 8088.333333333334], [215.0, 12321.0], [213.0, 12612.0], [212.0, 11287.0], [211.0, 15995.0], [210.0, 17101.0], [209.0, 10914.0], [222.0, 9495.0], [223.0, 15069.0], [221.0, 9958.0], [220.0, 9933.0], [219.0, 12907.0], [218.0, 15595.0], [217.0, 12895.0], [216.0, 10718.0], [227.0, 7826.0], [231.0, 16376.0], [230.0, 11698.0], [229.0, 10691.0], [228.0, 12539.0], [226.0, 12936.0], [225.0, 10814.0], [224.0, 16944.0], [239.0, 11484.0], [238.0, 13546.0], [237.0, 13989.0], [236.0, 13972.0], [235.0, 11814.0], [233.0, 9571.0], [232.0, 12143.0], [240.0, 8554.5], [241.0, 8682.0], [243.0, 8947.333333333334], [247.0, 12329.0], [245.0, 9411.0], [244.0, 11229.0], [254.0, 6997.0], [255.0, 9239.0], [253.0, 13149.0], [252.0, 10231.0], [251.0, 17300.0], [250.0, 10498.0], [249.0, 12109.0], [248.0, 9465.0], [270.0, 16106.0], [258.0, 8461.5], [257.0, 9197.0], [256.0, 8841.0], [259.0, 9253.0], [263.0, 12084.0], [262.0, 11973.0], [261.0, 4434.0], [260.0, 8232.0], [264.0, 5799.333333333333], [265.0, 7626.0], [267.0, 10783.0], [266.0, 8858.0], [271.0, 7812.0], [269.0, 8827.0], [268.0, 7820.0], [286.0, 6593.0], [282.0, 6526.0], [273.0, 6908.0], [272.0, 7734.0], [275.0, 9734.0], [274.0, 9913.0], [279.0, 11516.0], [278.0, 12579.0], [277.0, 8392.0], [276.0, 8838.0], [283.0, 6888.5], [287.0, 8340.0], [285.0, 9062.0], [284.0, 8176.0], [281.0, 11477.0], [280.0, 11511.0], [300.0, 8336.0], [289.0, 6876.0], [288.0, 7154.666666666666], [290.0, 7658.5], [291.0, 9328.0], [293.0, 9234.5], [292.0, 10758.0], [294.0, 10558.0], [295.0, 7232.0], [297.0, 6342.6], [296.0, 7815.5], [298.0, 7254.0], [299.0, 8516.0], [303.0, 11004.0], [302.0, 8461.0], [301.0, 7514.0], [317.0, 8993.0], [304.0, 7201.0], [306.0, 8116.0], [305.0, 11494.0], [308.0, 7156.5], [309.0, 8241.0], [311.0, 9450.0], [310.0, 10087.0], [315.0, 7144.5], [319.0, 9022.0], [318.0, 9581.0], [316.0, 10134.0], [307.0, 9329.0], [314.0, 9266.0], [313.0, 7258.0], [312.0, 7214.0], [332.0, 6929.166666666666], [320.0, 7556.5], [323.0, 8815.0], [322.0, 7880.5], [327.0, 8589.0], [326.0, 8145.0], [325.0, 7074.5], [324.0, 9916.0], [334.0, 6324.0], [333.0, 7670.0], [331.0, 7302.666666666667], [335.0, 6290.5], [329.0, 9310.0], [328.0, 8588.0], [330.0, 8324.0], [336.0, 7279.333333333333], [340.0, 6637.5], [341.0, 7381.5], [342.0, 6434.333333333333], [343.0, 7632.0], [348.0, 7677.666666666667], [339.0, 8624.0], [338.0, 8289.0], [349.0, 8158.0], [351.0, 7159.0], [350.0, 9604.0], [347.0, 7135.0], [346.0, 9059.0], [345.0, 8473.0], [344.0, 7047.0], [354.0, 7200.0], [357.0, 8065.5], [356.0, 8096.333333333333], [355.0, 7565.0], [364.0, 6178.0], [358.0, 7573.0], [359.0, 7947.0], [353.0, 6794.0], [352.0, 5996.0], [362.0, 8069.0], [361.0, 9006.0], [363.0, 7384.0], [367.0, 7392.0], [366.0, 8830.0], [365.0, 10044.0], [372.0, 9077.0], [371.0, 6082.0], [370.0, 6158.0], [369.0, 5990.0], [368.0, 7795.0], [1.0, 21752.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[201.12799999999987, 11995.264]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 372.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 424.43333333333334, "minX": 1.68294192E12, "maxY": 593974.3333333334, "series": [{"data": [[1.68294192E12, 444442.3333333333], [1.68294198E12, 593974.3333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68294192E12, 424.43333333333334], [1.68294198E12, 567.2333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68294198E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6216.33177570094, "minX": 1.68294192E12, "maxY": 16319.360139860137, "series": [{"data": [[1.68294192E12, 6216.33177570094], [1.68294198E12, 16319.360139860137]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68294198E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3829.0887850467298, "minX": 1.68294192E12, "maxY": 11936.136363636357, "series": [{"data": [[1.68294192E12, 3829.0887850467298], [1.68294198E12, 11936.136363636357]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68294198E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2053.7336448598135, "minX": 1.68294192E12, "maxY": 7742.062937062936, "series": [{"data": [[1.68294192E12, 2053.7336448598135], [1.68294198E12, 7742.062937062936]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68294198E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 932.0, "minX": 1.68294192E12, "maxY": 24275.0, "series": [{"data": [[1.68294192E12, 13731.0], [1.68294198E12, 24275.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68294192E12, 932.0], [1.68294198E12, 7734.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68294192E12, 9477.5], [1.68294198E12, 21948.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68294192E12, 11481.85], [1.68294198E12, 23967.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68294192E12, 6422.5], [1.68294198E12, 16771.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.68294192E12, 10127.75], [1.68294198E12, 22701.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68294198E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1357.0, "minX": 1.0, "maxY": 23961.0, "series": [{"data": [[8.0, 3831.5], [9.0, 1357.0], [10.0, 9290.5], [11.0, 3137.0], [12.0, 8618.5], [48.0, 20904.5], [13.0, 2425.0], [16.0, 2256.0], [1.0, 21752.0], [17.0, 9734.0], [19.0, 8324.0], [20.0, 6777.0], [5.0, 23961.0], [21.0, 12945.0], [22.0, 12068.0], [23.0, 17607.0], [24.0, 13488.5], [25.0, 6420.0], [26.0, 20549.0], [27.0, 17500.0], [7.0, 9084.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 841.0, "minX": 1.0, "maxY": 21945.0, "series": [{"data": [[8.0, 2043.5], [9.0, 841.0], [10.0, 6451.0], [11.0, 1689.0], [12.0, 5117.0], [48.0, 17586.5], [13.0, 1587.0], [16.0, 1400.0], [1.0, 9484.0], [17.0, 5074.0], [19.0, 6126.0], [20.0, 3745.0], [5.0, 21945.0], [21.0, 8042.0], [22.0, 7344.0], [23.0, 13808.0], [24.0, 8961.0], [25.0, 3634.0], [26.0, 16552.5], [27.0, 12681.0], [7.0, 6985.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.68294192E12, "maxY": 8.333333333333334, "series": [{"data": [[1.68294192E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68294192E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.68294192E12, "maxY": 4.766666666666667, "series": [{"data": [[1.68294192E12, 3.566666666666667], [1.68294198E12, 4.766666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68294198E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.68294192E12, "maxY": 4.766666666666667, "series": [{"data": [[1.68294192E12, 3.566666666666667], [1.68294198E12, 4.766666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68294198E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.68294192E12, "maxY": 4.766666666666667, "series": [{"data": [[1.68294192E12, 3.566666666666667], [1.68294198E12, 4.766666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68294198E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

